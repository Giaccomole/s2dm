<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simplified Semantic Data Modeling on S2DM</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Simplified Semantic Data Modeling on S2DM</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command Line Interface (CLI)</title>
      <link>http://localhost:1313/docs/tools/command-line-interface-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tools/command-line-interface-cli/</guid>
      <description>Export Commands Naming Configuration All export commands support a global naming configuration feature that allows you to transform element names during the export process using the [--naming-config | -n] flag.&#xA;Apply naming configuration to any export command:&#xA;s2dm export [--naming-config | -n] naming.yaml ...&#xD;Configuration Format The naming configuration is defined in a YAML file with the following structure:&#xA;# Transform type names by type context type: object: PascalCase interface: PascalCase input: PascalCase enum: PascalCase union: PascalCase scalar: PascalCase # Transform field names by type context field: object: camelCase interface: camelCase input: snake_case # Transform enum values (no context needed) enumValue: MACROCASE # Transform instanceTag field names (no context needed) instanceTag: COBOL-CASE # Transform argument names by context argument: field: camelCase&#xD;Supported Case Formats The naming configuration supports the following case conversion formats:</description>
    </item>
    <item>
      <title>Automation</title>
      <link>http://localhost:1313/docs/tools/automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tools/automation/</guid>
      <description>Under construction&amp;hellip;</description>
    </item>
    <item>
      <title>Example Use Cases</title>
      <link>http://localhost:1313/examples/use-cases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/use-cases/</guid>
      <description>Below are some examples of how the Simplified Semantic Data Modeling (S2DM) approach can be applied in different areas or use cases. Each example is linked to its corresponding folder in the repository for further exploration.&#xA;Example Use Cases Seat domain model: Modeling the Seat branch of the Vehicle Signal Specification (VSS). Trailer domain model: Modeling the Trailer of a vehicle. Multiple Classification Schemes: Enabling multiple classification schemes using SKOS. Multiple Domains: Covering cross-references across different domains.</description>
    </item>
    <item>
      <title>Actively Developed (SME)</title>
      <link>http://localhost:1313/docs/approach-overview/actively-developed-sme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/approach-overview/actively-developed-sme/</guid>
      <description>Under construction&amp;hellip;</description>
    </item>
    <item>
      <title>Pre-defined elements</title>
      <link>http://localhost:1313/docs/data-modeling-guideline/pre-defined-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/data-modeling-guideline/pre-defined-elements/</guid>
      <description>Units Units are represented as enum values. For example:&#xA;enum VelocityUnitEnum { KILOMETER_PER_HOUR METERS_PER_SECOND }&#xD;The name of the enum itself refers to the quantity kind (e.g., Velocity). A set of commonly used units is provided in the file unit_enums.graphql.&#xA;It is planned to adopt and reuse an existing standard data model for units. See issue #43 for details. Currently, the units file is inspired by the COVESA VSS Units file.</description>
    </item>
    <item>
      <title>Version Bump CLI Examples</title>
      <link>http://localhost:1313/examples/version-bump-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/version-bump-cli/</guid>
      <description>This section contains examples demonstrating different scenarios for the s2dm check version-bump command, based on GraphQL Inspector&amp;rsquo;s change detection.&#xA;Overview The version-bump command analyzes GraphQL schema changes and recommends the appropriate semantic version bump:&#xA;No version bump: Identical schemas Patch/Minor bump: Non-breaking changes (new optional fields, enum values) Major bump: Breaking changes (removed fields, type changes) Dangerous changes: Potentially problematic but not immediately breaking Examples 1. No Version Bump Needed Command:</description>
    </item>
    <item>
      <title>Interactive GraphQL Schema Visualization</title>
      <link>http://localhost:1313/examples/seat-voyager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/seat-voyager/</guid>
      <description>Interactive GraphQL Schema Visualization Explore the seat capabilities domain model through an interactive GraphQL Voyager visualization. This comprehensive schema, derived from the Vehicle Signal Specification (VSS) Seat branch, demonstrates how S2DM effectively models complex automotive domain relationships including nested components (backrest, headrest, seating), enumerated values, and rich type relationships.&#xA;Usage: Click and drag to navigate • Click types for details • Use the sidebar to search and explore documentation • Zoom with mouse wheel for different perspectives.</description>
    </item>
    <item>
      <title>Automated (CI Tooling)</title>
      <link>http://localhost:1313/docs/approach-overview/automated-ci-tooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/approach-overview/automated-ci-tooling/</guid>
      <description>Under construction&amp;hellip;</description>
    </item>
    <item>
      <title>How to...?</title>
      <link>http://localhost:1313/docs/data-modeling-guideline/how-to.../</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/data-modeling-guideline/how-to.../</guid>
      <description>Under construction..&#xA;&amp;hellip;model an object and/or a field? Simply use the GraphQL SDL. Object types start with type keyword.&#xA;type MyObject { someField: String # &amp;lt;-- Built-in scalar as output anotherField: AnotherOutputType # &amp;lt;-- Custom named type as output }&#xD;Modeling Guide This document explains how to contribute to a specific model (new or existing). If you want to contribute to the data modeling approach itself, see the Contributing Guide instead.</description>
    </item>
    <item>
      <title>Optional Extensions (Modelers)</title>
      <link>http://localhost:1313/docs/approach-overview/optional-extensions-modelers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/approach-overview/optional-extensions-modelers/</guid>
      <description>Under construction&amp;hellip;</description>
    </item>
  </channel>
</rss>
